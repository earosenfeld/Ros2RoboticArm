#!/bin/bash

echo "ü§ñ ROS 2 Robotic Arm Inspection System - Live Demonstration"
echo "=========================================================="
echo ""

# Check if system is running
echo "üîç Checking system status..."
if curl -s http://localhost:8000/health > /dev/null; then
    echo "‚úÖ Backend server is running"
else
    echo "‚ùå Backend server is not running. Please start it first:"
    echo "   ./kill_ports.sh && ./start_system.sh"
    exit 1
fi

if curl -s http://localhost:8080/ > /dev/null; then
    echo "‚úÖ Frontend server is running"
else
    echo "‚ùå Frontend server is not running. Please start it first:"
    echo "   ./kill_ports.sh && ./start_system.sh"
    exit 1
fi

echo ""
echo "üåê System Access Points:"
echo "   ‚Ä¢ Main Interface: http://localhost:8080"
echo "   ‚Ä¢ 3D Robot Visualizer: http://localhost:8080/robot_visualizer.html"
echo "   ‚Ä¢ API Documentation: http://localhost:8000/docs"
echo ""

# Show current system status
echo "üìä Current System Status:"
curl -s http://localhost:8000/api/status | python3 -c "
import json, sys
data = json.load(sys.stdin)
print(f'   ‚Ä¢ Robot Status: {data[\"robot_status\"]}')
print(f'   ‚Ä¢ Current Pose: {data[\"current_pose\"]}')
print(f'   ‚Ä¢ Gripper Position: {data[\"gripper_position\"]}')
print(f'   ‚Ä¢ Is Moving: {data[\"is_moving\"]}')
"

echo ""
echo "üéÆ Available Demo Commands:"
echo ""

# Demo 1: Move to home
echo "1Ô∏è‚É£ Moving robot to home position..."
curl -s -X POST http://localhost:8000/api/execute-command \
  -H "Content-Type: application/json" \
  -d '{"type": "MoveToPose", "data": {"pose": "home"}}' | python3 -c "
import json, sys
data = json.load(sys.stdin)
print(f'   ‚úÖ {data[\"message\"]}')
"

sleep 2

# Demo 2: Open gripper
echo ""
echo "2Ô∏è‚É£ Opening gripper..."
curl -s -X POST http://localhost:8000/api/execute-command \
  -H "Content-Type: application/json" \
  -d '{"type": "SetGripper", "data": {"position": 1.0}}' | python3 -c "
import json, sys
data = json.load(sys.stdin)
print(f'   ‚úÖ {data[\"message\"]}')
"

sleep 2

# Demo 3: Move to inspection
echo ""
echo "3Ô∏è‚É£ Moving to inspection position..."
curl -s -X POST http://localhost:8000/api/execute-command \
  -H "Content-Type: application/json" \
  -d '{"type": "MoveToPose", "data": {"pose": "inspection_position"}}' | python3 -c "
import json, sys
data = json.load(sys.stdin)
print(f'   ‚úÖ {data[\"message\"]}')
"

sleep 2

# Demo 4: Capture image
echo ""
echo "4Ô∏è‚É£ Capturing inspection image..."
curl -s -X POST http://localhost:8000/api/execute-command \
  -H "Content-Type: application/json" \
  -d '{"type": "CaptureImage", "data": {"save": true}}' | python3 -c "
import json, sys
data = json.load(sys.stdin)
print(f'   ‚úÖ {data[\"message\"]}')
"

sleep 2

# Demo 5: Run inspection
echo ""
echo "5Ô∏è‚É£ Running inspection routine..."
curl -s -X POST http://localhost:8000/api/execute-command \
  -H "Content-Type: application/json" \
  -d '{"type": "RunInspection", "data": {"type": "standard"}}' | python3 -c "
import json, sys
data = json.load(sys.stdin)
print(f'   ‚úÖ {data[\"message\"]}')
"

echo ""
echo "üéØ Demo Complete!"
echo ""
echo "üìã What to Show Next:"
echo "   1. Open http://localhost:8080 to show the visual programming interface"
echo "   2. Drag nodes from the left panel to create a workflow"
echo "   3. Connect nodes by clicking and dragging between connection points"
echo "   4. Double-click nodes to configure them"
echo "   5. Click 'Execute Workflow' to run the robot program"
echo "   6. Open http://localhost:8080/robot_visualizer.html to show 3D robot movement"
echo ""
echo "üîß System is ready for demonstration!" 